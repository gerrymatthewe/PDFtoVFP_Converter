<!--
    Page used for the homepage of the pdfs tab.
    The primary purpose of this page is to take pdfs, strip them down, place their assets in static resources, build the pdf using sf objects and then create a new vf page.
    Created by: Matt Gerry -- 06/17/2018
-->

<apex:page docType="html-5.0" controller="PDFtoVFP_Generator" sidebar="false" standardStylesheets="false" showHeader="false">
    <html>
        <head>
            <script type="text/javascript" src="https://code.jquery.com/jquery-3.2.1.min.js" />
            <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js" />
            <script type="text/javascript" src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/js/bootstrap.min.js" />
            <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jsforce/1.7.0/jsforce.js" />
            <script type="text/javascript" src="../../soap/ajax/43.0/connection.js"/>
            <script type="text/javascript" src="../../soap/ajax/43.0/apex.js"/>
            <apex:includeScript value="{!$Resource.pdfJS}"/>
            <apex:includeScript value="{!$Resource.pdfJSWorker}"/>
            <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta/css/bootstrap.min.css" rel="stylesheet" />
            <apex:stylesheet value="{!$Resource.PDFtoVFP_PDF_HomePage_CSS}"/>
        </head>

        <body class="pageBody">
        <!--Info box html goes here, this is the first overlay-->
        <div id="profileSelection" class="overlay">
            <div id="profileNames" class="overlay-content">
                <p id="profileInfo">Select the profiles you would like this visualforce page to be accessible to (You can only select 10 per transaction):</p>
                <p id="profileErrors"></p>
                <button type="button" class="btn btn-success" onclick="grabSelectedProfiles();" id="confirm-continue">Continue</button>
                <button type="button" class="btn btn-danger" onclick="closeNav();" id="cancel-continue">Cancel</button>  
            </div>
        </div>
        <!--End info box html-->
        
        <!--Info box html goes here, this is the first overlay-->
        <div id="infoBox" class="overlay">
            <div class="overlay-content">
                <canvas id="pdf-preview"></canvas>
                <p id="pdfInfo"></p>
                <button type="button" class="btn btn-success" onclick="beginConversion();" id="confirm-upload">Convert PDF</button>
                <button type="button" class="btn btn-danger" onclick="closeNav();" id="cancel-upload">Cancel</button>  
            </div>
        </div>
        <!--End info box html-->
        
        <!--Loading box html goes here, this is the second overlay-->
        <div id="loadingBox" class="overlay">
            <div class="overlay-content">
            
            <div class="circle-loader" id="loader">
              <div class="checkmark draw"></div>
            </div>
                <p id="conversion-info"></p>
                <button type="button" class="btn btn-success" onclick="popVFPage();" id="newVF">View new VF Page</button>
                <button type="button" class="btn btn-danger" onclick="closeNav();" id="failButton">Cancel</button>  
                
            </div>
        </div>
        <!--End loading box html-->

        <!-- Modal -->
        <div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="deleteModal" aria-hidden="true">
            <div class="overlay-content">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Delete PDF Confirmation</h5>
                        </div>
                        <div class="modal-body">
                            Are you sure you'd like to delete this pdf? This action is not reversible.
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="hideDeleteModal();">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="deleteConvertedPDF();">Delete PDF</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!--Main page html goes here-->
        <div id="homePageContainer">
            <nav class="navbar navbar-expand-md navbar-light bg-light fixed-top">
              <a class="navbar-brand" href="#">PDF to VFP Converter : </a>
              <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarsExampleDefault" aria-controls="navbarsExampleDefault" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
              </button>
        
              <div class="collapse navbar-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav mr-auto">
                  <li class="nav-item active">
                    <a class="nav-link" href="/">Return To Salesforce<span class="sr-only">(current)</span></a>
                  </li>
                </ul>
              </div>
            </nav>
            
            <button type="button" class="btn btn-info btn-lg" id="upload-button">Convert a new PDF</button> 
            <h5 id="tableName"> Previously Converted PDFs </h5>
            <table id="tableHolder">
            </table>

            <input type="file" id="file-to-upload" style="display:none;" accept="application/pdf" />
            
            <!--Hidden canvas to load pdf data-->
            <div id="pdf-main-container">
                <div id="pdf-contents">
                    <canvas id="pdf-canvas" style="display:none;"></canvas>
                    <div id="loadedImgs"></div>
                </div>
            </div>
            <!--End hidden canvas-->
         </div>
         <!--Main page html stops here-->   
            <script>
            
            //Setting up our list of global variables
            
            var __PDF_DOC,
                __CURRENT_PAGE,
                __TOTAL_PAGES,
                __PDF_ID,
                __fileName,
                __fileNameNoPath,
                __fileNameNoSpace,
                __fileNameFinal,
                __profileNames = [],
                __profilesSelected = '',
                __CANVAS = $('#pdf-canvas').get(0),
                __PREVIEW_CANVAS = $('#pdf-preview').get(0),
                __PREVIEW_CTX = __PREVIEW_CANVAS.getContext('2d'),
                __CANVAS_CTX = __CANVAS.getContext('2d'),
                __contentDocumentBasePath = "/sfc/servlet.shepherd/version/download/",
                __selected_Row,
                __selected_Id,
                __selected_Data,
                __folder__Id,
                __pdf_creation_errors = 0,
                __created_PdfPage_Count = 0;
                
            window.onload = setupPage;
            sforce.connection.sessionId='{!GETSESSIONID()}';
            //End global variable setup
            
            //Function used to grab our pdf and utilizing pdf.js analyze it.
            function showPDF(pdf_url) 
            {               
                //Building different variations of the file name for insertions later
                __fileName = document.getElementById("file-to-upload").value;
                __fileNameNoPath = __fileName.substring(__fileName.lastIndexOf("\\") + 1);
                __fileNameNoSpace = __fileNameNoPath.replace(/\s/g, '');
                __fileNameFinal = __fileNameNoSpace.replace(".pdf","");

                __pdf_creation_errors = 0;
                __created_PdfPage_Count = 0;
                $('.circle-loader').removeClass('load-complete');
                $('.circle-loader').removeClass('load-fail');
                $('.checkmark').hide();
                $('#pdfInfo').css({"color":"white"});
                $('#failButton').hide();
                $('#newVF').hide();

                //Getting the pdfs data
                PDFJS.getDocument({ url: pdf_url }).then(function(pdf_doc) 
                {
                    __PDF_DOC = pdf_doc;
                    __TOTAL_PAGES = __PDF_DOC.numPages;
                    
                    //Setting up out drop down ui
                    $('#pdfInfo').html('Our PDF conversion algorithm has determined that your PDF ' + __fileNameNoPath + ' has ' + __TOTAL_PAGES + ' pages. \n Ready to convert?');
                    showPreview();
                    openNav();
                    $('#upload-button').hide();
                    $('#tableHolder').hide();
                    $('#tableName').hide();

                }).catch(function(error)
                {
                    alert(error.message);
                });
            }
            
            //Produces the image preview in the initial drop down ui. It loads an image of the first page into the canvas on the screen.
            function showPreview()
            {
                __PDF_DOC.getPage(1).then(function(page) 
                {
                    // As the canvas is of a fixed width we need to set the scale of the viewport accordingly
            
                    // Get viewport of the page at required scale
                    var viewport = page.getViewport(0.25);
            
                    // Set canvas height
                    __PREVIEW_CANVAS.height = viewport.height;
                    __PREVIEW_CANVAS.width = viewport.width;
            
                    var renderContext = {
                        canvasContext: __PREVIEW_CTX,
                        viewport: viewport
                    };
                    
                    // Render the page contents in the canvas
                    page.render(renderContext)
                });
            }
            
            //Starts the actual conversion of the pdf into a vf page
            function beginConversion()
            {
                insertPDFRecord(__fileNameFinal);
            }
            
            //This method loops through the pages and creates both images to store in a zip for static resouces and records for pdfPages and pdfElements
            function showPage(page_no) 
            {
                //Set current page
                __CURRENT_PAGE = page_no;
                
                //Create img element to load into the page so we can translate the canvas url to an image for zipping
                imgElm = $('<img id="'+page_no+'">');
                imgElm.css("display","none");
                
                //Fetch the current page
                __PDF_DOC.getPage(page_no).then(function(page) 
                {
            
                    // Get viewport of the page at required scale
                    var viewport = page.getViewport(1);
            
                    // Set canvas height
                    __CANVAS.height = viewport.height;
                    __CANVAS.width = viewport.width;
            
                    var renderContext = {
                        canvasContext: __CANVAS_CTX,
                        viewport: viewport
                    };
                    
                    //Render the page contents in the canvas
                    page.render(renderContext).then(function() 
                    {
                        //Turn canvas url into an image and append it to the page
                        imgElm.attr("src", __CANVAS.toDataURL());
                        //imgElm.appendTo("#loadedImgs");
                        
                        //Setting up our image source data and our image name
                        var imgSource = imgElm.prop('src');
                        var finalSource = imgSource.replace("data:image/png;base64,", "");
                        var imgName = "Img" + __CURRENT_PAGE + ".png";
                        
                        //If we still have pages to create, enter
                        if(__CURRENT_PAGE <= __TOTAL_PAGES)
                        {
                            //Letting the user know what page is currently converting
                            $('#conversion-info').html('Now Converting Page ' + __CURRENT_PAGE);

                            insertContentDocuments(__fileNameFinal, __CURRENT_PAGE, finalSource, __TOTAL_PAGES, "Page"+__CURRENT_PAGE);

                            //iterate current page
                            __CURRENT_PAGE = __CURRENT_PAGE+1;

                            //If we havent hit the final page, call showpage again and repeat the above process
                            if(__CURRENT_PAGE <= __TOTAL_PAGES)
                            {
                                showPage(__CURRENT_PAGE);
                            }
                            else
                            {
                                //Letting the user know what page is currently converting
                                $('#conversion-info').html('Converting PDF images to Salesforce Files');
                            }
                        }
                        
                    });
                });
            }

            function insertPDFRecord(pdfName)
            {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.insertPDF}',
                    pdfName,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            console.log('The file creation failed due to the following: ' + event.message + ' This is the result ::: ' + result);
                            __pdf_creation_errors++;
                        }
                        else
                        {
                            console.log('The main pdf record was created successfully ::: ' + result);

                            if(result === 'duplicate')
                            {
                                $('#pdfInfo').html('A PDF with the same name has already been uploaded. PDF records must be unique. Please change the name of the PDF and re-upload it.');
                                $('#pdfInfo').css({"color":"red"});
                                $('#failButton').show();
                            }
                            else
                            {
                                __PDF_ID = result;
                                insertContentFolder(pdfName);
                            }
                        }
                    },
                    {
                        escape: true
                    });
            }

            function insertContentFolder(pdfName)
            {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.insertFolder}',
                    pdfName,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            console.log('The file creation failed due to the following: ' + event.message + ' This is the result ::: ' + result);
                            /*deleteConvertedPDF();
                            $('#conversion-info').html('Rolling back data changes. The visualforce page was not successfully created due to the following error: ' + event.message);
                            $('#failButton').show();*/
                            __pdf_creation_errors++;
                        }
                        else
                        {
                            console.log('The content folder was created successfully ::: ' + result);
                            __folder__Id = result;
                            //If successful we switch to our loading nav
                            switchNav("infoBox","loadingBox");

                            //Call the method to loop through the pages and create data based on them
                            showPage(1);
                        }
                    },
                    {
                        escape: true
                    });
            }

            function insertContentDocuments(pdfName, imgNum, fileContent, totalImages, pdfPageName)
            {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.insertContentDocument}',
                    pdfName,
                    imgNum,
                    fileContent,
                    __folder__Id,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            console.log('The file creation failed due to the following: ' + event.message + ' This is the result ::: ' + result);
                            __pdf_creation_errors++;
                        }
                        else
                        {
                            console.log('The document was created successfully ::: ' + result);
                            insertPDFPage(pdfPageName, __PDF_ID, imgNum,  __contentDocumentBasePath + result);
                        }
                    },
                    {
                        escape: true
                    });
            }

            function insertPDFPage(pageName, pdfId, pageNum, imageURL)
            {
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.insertPDFPage}',
                    pageName,
                    pdfId,
                    pageNum,
                    imageURL,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            console.log('The file creation failed due to the following: ' + event.message + ' This is the result ::: ' + result);
                            __pdf_creation_errors++;
                        }
                        else
                        {
                            __created_PdfPage_Count++;
                            console.log('This is the created pdf count ::: ' + __created_PdfPage_Count + ' ::: This is the total page count ::: ' + __TOTAL_PAGES);
                            if(__created_PdfPage_Count == __TOTAL_PAGES)
                            {
                                if(__pdf_creation_errors == 0)
                                {
                                    createVFP();
                                }
                                else
                                {
                                    deleteConvertedPDF();
                                    $('#conversion-info').html('Rolling back data changes. The visualforce page was not successfully created due to the following error: ' + event.message);
                                    $('#failButton').show();
                                }
                            }
                            console.log('The pdfPage was created successfully ::: ' + result);
                        }
                    },
                    {
                        escape: true
                    });
            }

            function createVFP()
            {
                //Attempt to create the vf page by calling our apex method in the class PDFtoVFP_Generator
                $('#conversion-info').html('Attempting to generate VF Page.');
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.VFToolingManager}',
                    __PDF_ID,
                    __profilesSelected,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            $('#conversion-info').html('Rolling back data changes. The visualforce page was not successfully created due to the following error: ' + event.message);
                            $('#failButton').show();
                            deleteConvertedPDF();
                        }
                        else
                        {
                            //Inform user the conversion was successful and show our new vf page
                            $('#conversion-info').html('Conversion successful. Please allow up to 10 minutes for your selected profiles to gain access to your new visualforce page.');
                            $('.circle-loader').addClass('load-complete');
                            $('#newVF').show();
                            loadPDFTable();
                        }
                    },
                    {
                        escape: true
                    });
            }
            
            //If we hit an error we call this function and it deletes the pdf record, which in turn deletes all other records
            function deleteConvertedPDF()
            {
                var pdfIdToDelete = null;

                if(__selected_Id)
                {
                    pdfIdToDelete = __selected_Id;
                }
                else if(__PDF_ID)
                {
                    pdfIdToDelete = __PDF_ID;
                }

                //Attempt to create the vf page by calling our apex method in the class PDFtoVFP_Generator
                $('#conversion-info').html('Deleting converted Visualforce page.');
                Visualforce.remoting.Manager.invokeAction(
                    '{!$RemoteAction.PDFtoVFP_Generator.deletePDFFiles}',
                    pdfIdToDelete,
                    function(result, event)
                    {
                        //If we hit an exception, inform user and rollback
                        if (event.type === 'exception')
                        {
                            $('#conversion-info').html('Delete failed due to the following: ' + event.message);
                            $('#failButton').show();
                        }
                        else
                        {
                            //Inform user the conversion was successful and show our new vf page
                            $('#conversion-info').html('Delete successful.');
                            $('.circle-loader').addClass('load-complete');
                            $('.checkmark').show();
                            __PDF_ID = null;
                            __selected_Id = null;
                            if(__selected_Row)
                            {
                                $('#'+pdfIdToDelete).remove();
                            }
                            $("#deleteModal").hide();
                        }
                    },
                    {
                        escape: true
                    });
            }

            function checkDelete(fileName, rownum, pdfId)
            {
                __selected_Data = fileName;
                __selected_Row = rownum;
                __selected_Id = pdfId;

                $("#deleteModal").css({"top":"20%", "opacity":"100", "overflow":"inherit"});
                $("#deleteModal").show();
            }

            function hideDeleteModal()
            {
                __selected_Data = null;
                __selected_Row = null;
                __selected_Id = null;
                $("#deleteModal").hide();
            }
            
            // Upon click this should should trigger click on the #file-to-upload file input element
            // This is better than showing the not-good-looking file input element
            $("#upload-button").on('click', function() {
                $("#file-to-upload").trigger('click');
            });
            
            // When user chooses a PDF file
            $("#file-to-upload").on('change', function() {
                // Validate whether PDF
                if(['application/pdf'].indexOf($("#file-to-upload").get(0).files[0].type) == -1) {
                    alert('Error : Not a PDF');
                    return;
                }
            
                // Send the object url of the pdf
                showPDF(URL.createObjectURL($("#file-to-upload").get(0).files[0]));
            });
            
            //Used to open the first drop down display
            function openNav() 
            {
                document.getElementById("profileSelection").style.height = "100%";
            }
            
            //Used to close the current nav bar and reset relevant elements
            function closeNav() 
            {
                document.getElementById("infoBox").style.height = "0%";
                document.getElementById("loadingBox").style.height = "0%";
                document.getElementById("profileSelection").style.height = "0%";                
                $('.circle-loader').addClass('load-fail');
                $('#conversion-info').html('Now Converting Page 1');
                $('#failButton').hide();
                $('#upload-button').show();
                $('#tableHolder').show();
                $('#tableName').show();
                __profilesSelected = '';
                __created_PdfPage_Count = 0;
            }
            
            //Used to switch between the info nav and the loading nav
            function switchNav(divClosed, divOpened)
            {
                document.getElementById(divClosed).style.height = "0%";
                document.getElementById(divOpened).style.height = "100%";
            }
            
            //Used to pop a new tab with the new vf page
            function popVFPage()
            {
                var newURL = '/apex/' + __fileNameFinal;
                window.open(newURL , '_blank'); 
                document.getElementById("loadingBox").style.height = "0%";
                $('.circle-loader').addClass('load-complete');
                $('#upload-button').show();
                $('#tableHolder').show();
                $('#tableName').show();
                __created_PdfPage_Count = 0;
                __profilesSelected = '';
            }
            
            function setupCheckBoxes()
            {
                var profileErrors = document.getElementById("profileErrors");

                
                for(var p = 0; p < __profileNames.length; p++)
                {
                    var linebreak = document.createElement("br");
                    var container = document.getElementById('profileNames');
                    var checkbox = document.createElement('input');
                    checkbox.type = "checkbox";
                    checkbox.name = __profileNames[p];
                    checkbox.value =  __profileNames[p];
                    checkbox.id =  __profileNames[p];
                    checkbox.className =  'profRows';
                    
                    var label = document.createElement('label')
                    label.htmlFor =  __profileNames[p];
                    label.appendChild(document.createTextNode( __profileNames[p]));
                    label.className =  'profRows';
                    label.style = "color:white; padding: 10px 15px 10px 10px";
                    
                    container.appendChild(checkbox);
                    container.appendChild(label);

                    container.insertBefore(linebreak, profileErrors);
                    container.insertBefore(label, linebreak);
                    container.insertBefore(checkbox, label);


                }
            }
            
            function grabSelectedProfiles()
            {
                $("input:checkbox[type=checkbox]:checked").each(function()
                {
                    __profilesSelected += $(this).val() + ',';
                    
                });

                switchNav('profileSelection','infoBox');                
            }

            function setupPage()
            {
                __profileNames = '{!profileNames}'.replace("[", "").replace("]", "").split(",");
                setupCheckBoxes();
                loadPDFTable();
            }

            function loadPDFTable()
            {
                var state =
                    {
                        output: document.getElementById("tableHolder"),
                        startTime: new Date().getTime()
                    };

                var callback =
                    {
                        onSuccess: buildTable,

                        onFailure: queryFailed,

                        source:state
                    };

                sforce.connection.query("SELECT Id, Name, gAuto__Link_To_VF_Page__c FROM gAuto__PDF__c ORDER BY Name", callback);
            }
            
            function queryFailed(error, source)
            {
                alert(error);
            }
            
            function buildTable(queryResult, source)
            {
                $("#tableHolder").empty();

                $('#tableHolder').append('                <thead>\n' +
                    '                    <tr>\n' +
                    '                        <th>Remove</th>\n' +
                    '                        <th>View VF Page</th>\n' +
                    '                    </tr>\n' +
                    '                </thead>\n');

                var pdfs = queryResult.getArray('records');
                //alert(pdfs);
                for(var i = 0; i<pdfs.length; i++)
                {
                    var pdfFound = pdfs[i];
                    $('#tableHolder').append(
                        '<tr id = "'+pdfFound.Id+'">'
                        +'<td><button type="button" class="btn btn-danger" onclick="checkDelete(\''+pdfFound.Name+'\', '+(i+1)+', \''+pdfFound.Id+'\');">Delete</button></td>'
                        +'<td><a target="_blank" href="' + pdfFound.gAuto__Link_To_VF_Page__c + '">' + pdfFound.Name + '</a></td>'
                        +'</tr>'
                    );
                }
            }


            </script>
              
        </body>
    
    </html>
</apex:page>